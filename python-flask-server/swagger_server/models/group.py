# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Group(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, created: date=None, users: List[UserPublic]=None):  # noqa: E501
        """Group - a model defined in Swagger

        :param uuid: The uuid of this Group.  # noqa: E501
        :type uuid: str
        :param created: The created of this Group.  # noqa: E501
        :type created: date
        :param users: The users of this Group.  # noqa: E501
        :type users: List[UserPublic]
        """
        self.swagger_types = {
            'uuid': str,
            'created': date,
            'users': List[UserPublic]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'created': 'created',
            'users': 'users'
        }

        self._uuid = uuid
        self._created = created
        self._users = users

    @classmethod
    def from_dict(cls, dikt) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Group of this Group.  # noqa: E501
        :rtype: Group
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Group.


        :return: The uuid of this Group.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Group.


        :param uuid: The uuid of this Group.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def created(self) -> date:
        """Gets the created of this Group.


        :return: The created of this Group.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created: date):
        """Sets the created of this Group.


        :param created: The created of this Group.
        :type created: date
        """

        self._created = created

    @property
    def users(self) -> List[UserPublic]:
        """Gets the users of this Group.


        :return: The users of this Group.
        :rtype: List[UserPublic]
        """
        return self._users

    @users.setter
    def users(self, users: List[UserPublic]):
        """Sets the users of this Group.


        :param users: The users of this Group.
        :type users: List[UserPublic]
        """

        self._users = users
