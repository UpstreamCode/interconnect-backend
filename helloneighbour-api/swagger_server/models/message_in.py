# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MessageIn(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, user: str=None, sent: str=None, message: str=None):  # noqa: E501
        """MessageIn - a model defined in Swagger

        :param group: The group of this MessageIn.  # noqa: E501
        :type group: str
        :param user: The user of this MessageIn.  # noqa: E501
        :type user: str
        :param sent: The sent of this MessageIn.  # noqa: E501
        :type sent: str
        :param message: The message of this MessageIn.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'group': str,
            'user': str,
            'sent': str,
            'message': str
        }

        self.attribute_map = {
            'group': 'group',
            'user': 'user',
            'sent': 'sent',
            'message': 'message'
        }

        self._group = group
        self._user = user
        self._sent = sent
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'MessageIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MessageIn of this MessageIn.  # noqa: E501
        :rtype: MessageIn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self) -> str:
        """Gets the group of this MessageIn.


        :return: The group of this MessageIn.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """Sets the group of this MessageIn.


        :param group: The group of this MessageIn.
        :type group: str
        """

        self._group = group

    @property
    def user(self) -> str:
        """Gets the user of this MessageIn.


        :return: The user of this MessageIn.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this MessageIn.


        :param user: The user of this MessageIn.
        :type user: str
        """

        self._user = user

    @property
    def sent(self) -> str:
        """Gets the sent of this MessageIn.


        :return: The sent of this MessageIn.
        :rtype: str
        """
        return self._sent

    @sent.setter
    def sent(self, sent: str):
        """Sets the sent of this MessageIn.


        :param sent: The sent of this MessageIn.
        :type sent: str
        """

        self._sent = sent

    @property
    def message(self) -> str:
        """Gets the message of this MessageIn.


        :return: The message of this MessageIn.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this MessageIn.


        :param message: The message of this MessageIn.
        :type message: str
        """

        self._message = message
