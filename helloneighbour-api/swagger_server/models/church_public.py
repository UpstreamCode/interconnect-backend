# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ChurchPublic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, address: str=None, website: str=None, email: str=None, phone: str=None, main_contact: str=None, uuid: str=None):  # noqa: E501
        """ChurchPublic - a model defined in Swagger

        :param name: The name of this ChurchPublic.  # noqa: E501
        :type name: str
        :param description: The description of this ChurchPublic.  # noqa: E501
        :type description: str
        :param address: The address of this ChurchPublic.  # noqa: E501
        :type address: str
        :param website: The website of this ChurchPublic.  # noqa: E501
        :type website: str
        :param email: The email of this ChurchPublic.  # noqa: E501
        :type email: str
        :param phone: The phone of this ChurchPublic.  # noqa: E501
        :type phone: str
        :param main_contact: The main_contact of this ChurchPublic.  # noqa: E501
        :type main_contact: str
        :param uuid: The uuid of this ChurchPublic.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'address': str,
            'website': str,
            'email': str,
            'phone': str,
            'main_contact': str,
            'uuid': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'address': 'address',
            'website': 'website',
            'email': 'email',
            'phone': 'phone',
            'main_contact': 'main_contact',
            'uuid': 'uuid'
        }

        self._name = name
        self._description = description
        self._address = address
        self._website = website
        self._email = email
        self._phone = phone
        self._main_contact = main_contact
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'ChurchPublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChurchPublic of this ChurchPublic.  # noqa: E501
        :rtype: ChurchPublic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ChurchPublic.


        :return: The name of this ChurchPublic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ChurchPublic.


        :param name: The name of this ChurchPublic.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ChurchPublic.


        :return: The description of this ChurchPublic.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ChurchPublic.


        :param description: The description of this ChurchPublic.
        :type description: str
        """

        self._description = description

    @property
    def address(self) -> str:
        """Gets the address of this ChurchPublic.


        :return: The address of this ChurchPublic.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this ChurchPublic.


        :param address: The address of this ChurchPublic.
        :type address: str
        """

        self._address = address

    @property
    def website(self) -> str:
        """Gets the website of this ChurchPublic.


        :return: The website of this ChurchPublic.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website: str):
        """Sets the website of this ChurchPublic.


        :param website: The website of this ChurchPublic.
        :type website: str
        """

        self._website = website

    @property
    def email(self) -> str:
        """Gets the email of this ChurchPublic.


        :return: The email of this ChurchPublic.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ChurchPublic.


        :param email: The email of this ChurchPublic.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this ChurchPublic.


        :return: The phone of this ChurchPublic.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this ChurchPublic.


        :param phone: The phone of this ChurchPublic.
        :type phone: str
        """

        self._phone = phone

    @property
    def main_contact(self) -> str:
        """Gets the main_contact of this ChurchPublic.


        :return: The main_contact of this ChurchPublic.
        :rtype: str
        """
        return self._main_contact

    @main_contact.setter
    def main_contact(self, main_contact: str):
        """Sets the main_contact of this ChurchPublic.


        :param main_contact: The main_contact of this ChurchPublic.
        :type main_contact: str
        """

        self._main_contact = main_contact

    @property
    def uuid(self) -> str:
        """Gets the uuid of this ChurchPublic.


        :return: The uuid of this ChurchPublic.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ChurchPublic.


        :param uuid: The uuid of this ChurchPublic.
        :type uuid: str
        """

        self._uuid = uuid
