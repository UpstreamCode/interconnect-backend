swagger: "2.0"
info:
  description: "This is the API for Covid 19 Global Church Hack Interconnect"
  version: "0.0.1"
  title: "Covid 19 Global Church Hack Interconnect"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v0"
tags:
- name: "leader"
  description: "Everything that relates to church leaders interacting with the system"
- name: "member"
  description: "Everything relating to church members interacting with the system"
schemes:
- "https"
paths:
  /user:
    get:
      tags:
      - "leader"
      summary: "Retrieve list of all your church members"
      description: "Retrieve user details of all users."
      operationId: "getUsers"
      responses:
        200:
          description: "User details"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        404:
          description: "User not found"
          schema:
            $ref:  "#/definitions/ErrorResponse"
    post:
      tags:
      - "member"
      summary: "Create new user account"
      description: "Create a new user to be authenticated via Firebase. Both church leaders and members need such an account."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details for new account"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
      responses:
        200:
          description: "User account created"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/{userUuid}:
    get:
      tags:
      - "member"
      summary: "Retrieve user details"
      description: "Retrieve user details including the user's contact details."
      operationId: "getUser"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        200:
          description: "User details"
          schema:
            $ref: "#/definitions/PublicUser"
        404:
          description: "User not found"
          schema:
            $ref:  "#/definitions/ErrorResponse"
    put:
      tags:
      - "member"
      summary: "Update user"
      description: "Update user identified by user's UUID. All attributes can be edited."
      operationId: "editUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "New user details"
        required: true
        schema:
          $ref: "#/definitions/UserIn"
      responses:
        200:
          description: "User account updated"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "member"
      summary: "Delete user"
      description: "Delete identified by user's UUID."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        204:
          description: "User deleted"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/{userUuid}/contactmethod:
    post:
      tags:
      - "member"
      summary: "Add a contact method to a user profile"
      description: "Add a new contact method to an existing user profile."
      operationId: "addContactMethod"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        description: "User's UUID"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "Details of new contact method"
        required: true
        schema:
          $ref: "#/definitions/ContactMethodIn"
      responses:
        200:
          description: "Contact method created"
          schema:
            $ref: "#/definitions/ContactMethod"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/{userUuid}/contactmethod/{methodUuid}:
    put:
      tags:
      - "member"
      summary: "Update a contact method for a user"
      description: "Update a contact method for a user profile."
      operationId: "updateContactMethod"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        description: "User's UUID"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "methodUuid"
        description: "Contact method's UUID"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "New details of contact method"
        required: true
        schema:
          $ref: "#/definitions/ContactMethodIn"
      responses:
        200:
          description: "Contact method updated"
          schema:
            $ref: "#/definitions/ContactMethod"
        404:
          description: "Contact method or user not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
      - "member"
      summary: "Delete a contact method from a user profile"
      description: "Delete a contact method from a user profile."
      operationId: "deleteContactMethod"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userUuid"
        description: "User's UUID"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "methodUuid"
        description: "Contact method's UUID"
        type: "string"
        format: "uuid"
        required: true
      responses:
        204:
          description: "Contact method deleted"
        404:
          description: "Contact method or user not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /church:
    post:
      tags:
      - "leader"
      summary: "Add new church"
      description: "Add new church to the system to invite members to"
      operationId: "addChurch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Church details for new account"
        required: true
        schema:
          $ref: "#/definitions/ChurchIn"
      responses:
        200:
          description: "Church added"
          schema:
            $ref: "#/definitions/Church"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /church/{churchUuid}:
    get:
      tags:
      - "member"
      summary: "Retrieve church details"
      description: "Retrieve church details not including configuration."
      operationId: "getChurch"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        200:
          description: "Church details"
          schema:
            $ref: "#/definitions/Church"
        404:
          description: "Church not found"
          schema:
            $ref:  "#/definitions/ErrorResponse"
    put:
      tags:
      - "leader"
      summary: "Update church"
      description: "Update church identified by church's UUID. All attributes can be edited."
      operationId: "editChurch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "New church details"
        required: true
        schema:
          $ref: "#/definitions/ChurchIn"
      responses:
        200:
          description: "Church profile modified"
          schema:
            $ref: "#/definitions/ChurchIn"
        404:
          description: "Church not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "leader"
      summary: "Delete church"
      description: "Delete a church from the system."
      operationId: "deleteChurch"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        204:
          description: "Church deleted"
        404:
          description: "Church not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /church/{churchUuid}/question:
    post:
      tags:
      - "leader"
      summary: "Add question"
      description: "Add a question to the system."
      operationId: "addQuestion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "Question for the church"
        required: true
        schema:
          $ref: "#/definitions/QuestionIn"
      responses:
        200:
          description: "Question added"
          schema:
            $ref: "#/definitions/Question"
        404:
          description: "Church not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /church/{churchUuid}/question/{questionUuid}:
    get:
      tags:
      - "leader"
      summary: "Retrieve question"
      description: "Retrieve a question for church for given UUIDs."
      operationId: "getQuestion"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "questionUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        200:
          description: "Church question"
          schema:
            $ref: "#/definitions/Question"
        404:
          description: "Question not found"
          schema:
            $ref:  "#/definitions/ErrorResponse"
    put:
      tags:
      - "leader"
      summary: "Update question"
      description: "Update a question that's already in the system."
      operationId: "modifyQuestion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "questionUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "body"
        name: "body"
        description: "Question for the church"
        required: true
        schema:
          $ref: "#/definitions/QuestionIn"
      responses:
        200:
          description: "Question updated"
          schema:
            $ref: "#/definitions/Question"
        404:
          description: "Question not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "leader"
      summary: "Delete question"
      description: "Delete a question from the system."
      operationId: "deleteQuestion"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "questionUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        204:
          description: "Question deleted"
        404:
          description: "Question not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /church/{churchUuid}/matchgroup/{matchGroupUuid}:
    get:
      tags:
      - "member"
      summary: "Retrieve group"
      description: "Retrieve a group of matched members for the given UUIDs."
      operationId: "getMatchGroup"
      parameters:
      - in: "path"
        name: "churchUuid"
        type: "string"
        format: "uuid"
        required: true
      - in: "path"
        name: "matchGroupUuid"
        type: "string"
        format: "uuid"
        required: true
      responses:
        200:
          description: "Group of matched church members"
          schema:
            $ref: "#/definitions/Group"
        404:
          description: "Group not found"
          schema:
            $ref:  "#/definitions/ErrorResponse"

definitions:
  UserIn:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
      firstName:
        type: "string"
      lastName:
        type: "string"
      contact:
        type: "array"
        items:
          $ref: "#/definitions/ContactMethodIn"
      dateOfBirth:
        type: "string"
        format: "date"
      description:
        type: "string"

  User:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      email:
        type: "string"
        format: "email"
      firstName:
        type: "string"
      lastName:
        type: "string"
      contact:
        type: "array"
        items:
          $ref: "#/definitions/ContactMethod"
      gender:
        type: "string"
        enum:
          - "male"
          - "female"
      dateOfBirth:
        type: "string"
        format: "date"
      description:
        type: "string"
      church:
        type: "string"
        format: "uuid"

  PublicUser:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      email:
        type: "string"
        format: "email"
      firstName:
        type: "string"
      lastName:
        type: "string"
      contact:
        type: "array"
        items:
          $ref: "#/definitions/ContactMethod"
      gender:
        type: "string"
        enum:
          - "male"
          - "female"
      description:
        type: "string"
      church:
        type: "string"
        format: "uuid"

  ChurchIn:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      website:
        type: "string"
        format: "url"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
      main_contact:
        type: "string"
        format: "uuid"
      group_size: 
        type: "integer"
        minimum: 2
        multipleOf: 2
        maximum: 10
      same_gender: 
        type: "boolean"
      min_age: 
        type: "integer"

  Church:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      website:
        type: "string"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
      main_contact:
        type: "string"
        format: "uuid"
      group_size: 
        type: "integer"
        minimum: 2
        multipleOf: 2
        maximum: 10
      same_gender: 
        type: "boolean"
      min_age: 
        type: "integer"

  ContactMethodIn:
    type: "object"
    properties:
      label:
        type: "string"
      contactDetails:
        type: "string"

  ContactMethod:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      label:
        type: "string"
      contactDetails:
        type: "string"

  QuestionIn:
    type: "object"
    properties:
      question:
        type: "string"
      shared:
        type: "boolean"

  Question:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      question:
        type: "string"
      shared:
        type: "boolean"

  Group:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      created:
        type: "string"
        format: "date"
      users:
        type: "array"
        items:
          $ref: "#/definitions/User"

  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
